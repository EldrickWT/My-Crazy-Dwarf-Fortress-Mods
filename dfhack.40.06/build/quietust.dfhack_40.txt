diff --git a/library/modules/Items.cpp b/library/modules/Items.cpp
index f251402..35cc620 100644
--- a/library/modules/Items.cpp
+++ b/library/modules/Items.cpp
@@ -1155,7 +1155,6 @@ int Items::getItemBaseValue(int16_t item_type, int16_t item_subtype, int16_t mat
 
     case item_type::MEAT:
     case item_type::PLANT:
-    case item_type::LEAVES:
     case item_type::CHEESE:
         value = 2;
         break;
diff --git a/library/modules/MapCache.cpp b/library/modules/MapCache.cpp
index db3b4cd..f2b5610 100644
--- a/library/modules/MapCache.cpp
+++ b/library/modules/MapCache.cpp
@@ -730,12 +730,6 @@ void MapExtras::BlockInfo::prepare(Block *mblock)
     SquashVeins(block,veinmats,veintype);
     SquashGrass(block, grass);
 
-    for (size_t i = 0; i < block->plants.size(); i++)
-    {
-        auto pp = block->plants[i];
-        plants[pp->pos] = pp;
-    }
-
     global_feature = Maps::getGlobalInitFeature(block->global_feature);
     local_feature = Maps::getLocalInitFeature(block->region_pos, block->local_feature);
 }
@@ -805,15 +799,6 @@ t_matpair MapExtras::BlockInfo::getBaseMaterial(df::tiletype tt, df::coord2d pos
         break;
 
     case PLANT:
-        rv.mat_type = MaterialInfo::PLANT_BASE;
-        if (auto plant = plants[block->map_pos + df::coord(x,y,0)])
-        {
-            if (auto raw = df::plant_raw::find(plant->material))
-            {
-                rv.mat_type = raw->material_defs.type_basic_mat;
-                rv.mat_index = raw->material_defs.idx_basic_mat;
-            }
-        }
         break;
 
     case GRASS_LIGHT:
diff --git a/library/modules/Maps.cpp b/library/modules/Maps.cpp
index fd1ccc5..b263410 100644
--- a/library/modules/Maps.cpp
+++ b/library/modules/Maps.cpp
@@ -242,7 +242,7 @@ void Maps::enableBlockUpdates(df::map_block *blk, bool flow, bool temperature)
         blk->flags.bits.update_liquid_twice = true;
     }
 
-    auto z_flags = world->map.z_level_flags;
+    auto z_flags = world->map_extras.z_level_flags;
     int z_level = blk->map_pos.z;
 
     if (z_flags && z_level >= 0 && z_level < world->map.z_count_block)
diff --git a/library/modules/Materials.cpp b/library/modules/Materials.cpp
index 60a35fa..20b5a91 100644
--- a/library/modules/Materials.cpp
+++ b/library/modules/Materials.cpp
@@ -479,7 +479,6 @@ void MaterialInfo::getMatchBits(df::job_item_flags1 &ok, df::job_item_flags1 &ma
     TEST(extract_bearing_fish, false);
     TEST(extract_bearing_vermin, false);
     TEST(processable_to_vial, structural && FLAG(plant, plant_raw_flags::EXTRACT_VIAL));
-    TEST(processable_to_bag, structural && FLAG(plant, plant_raw_flags::LEAVES));
     TEST(processable_to_barrel, structural && FLAG(plant, plant_raw_flags::EXTRACT_BARREL));
     TEST(solid, !(MAT_FLAG(ALCOHOL_PLANT) ||
                   MAT_FLAG(ALCOHOL_CREATURE) ||
diff --git a/library/modules/Translation.cpp b/library/modules/Translation.cpp
index 90f8bbb..b42cf4d 100644
--- a/library/modules/Translation.cpp
+++ b/library/modules/Translation.cpp
@@ -153,7 +153,7 @@ string Translation::TranslateName(const df::language_name * name, bool inEnglish
         if (!name->nickname.empty())
         {
             word = "`" + name->nickname + "'";
-            switch (d_init ? d_init->nickname_dwarf : d_init_nickname::CENTRALIZE)
+            switch (d_init ? d_init->nickname[*df::global::gametype] : d_init_nickname::CENTRALIZE)
             {
             case d_init_nickname::REPLACE_ALL:
                 out = word;
diff --git a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
index ad76889..febfd0f 100644
--- a/plugins/CMakeLists.txt
+++ b/plugins/CMakeLists.txt
@@ -38,12 +38,12 @@ endif()
 
 OPTION(BUILD_MAPEXPORT "Build map exporter." ON)
 if (BUILD_MAPEXPORT)
-    add_subdirectory (mapexport)
+#    add_subdirectory (mapexport)
 endif()
 
 OPTION(BUILD_DWARFEXPORT "Build dwarf exporter." ON)
 if (BUILD_DWARFEXPORT)
-    add_subdirectory (dwarfexport)
+#    add_subdirectory (dwarfexport)
 endif()
 
 OPTION(BUILD_RUBY "Build ruby binding." ON)
@@ -79,7 +79,7 @@ add_custom_target(generate_proto DEPENDS ${PROJECT_PROTO_SRCS} ${PROJECT_PROTO_H
 
 SET_SOURCE_FILES_PROPERTIES( Brushes.h PROPERTIES HEADER_FILE_ONLY TRUE )
 
-add_subdirectory(diggingInvaders)
+#add_subdirectory(diggingInvaders)
 
 # Plugins
 OPTION(BUILD_SUPPORTED "Build the supported plugins (reveal, probe, etc.)." ON)
@@ -90,12 +90,12 @@ if (BUILD_SUPPORTED)
     DFHACK_PLUGIN(cursecheck cursecheck.cpp)
     # automatically assign labors to dwarves!
     DFHACK_PLUGIN(autolabor autolabor.cpp)
-    DFHACK_PLUGIN(dig dig.cpp)
+#    DFHACK_PLUGIN(dig dig.cpp)
     DFHACK_PLUGIN(drybuckets drybuckets.cpp)
-    DFHACK_PLUGIN(getplants getplants.cpp)
-    DFHACK_PLUGIN(plants plants.cpp)
+#    DFHACK_PLUGIN(getplants getplants.cpp)
+#    DFHACK_PLUGIN(plants plants.cpp)
     DFHACK_PLUGIN(fastdwarf fastdwarf.cpp)
-    DFHACK_PLUGIN(prospector prospector.cpp)
+#    DFHACK_PLUGIN(prospector prospector.cpp)
     DFHACK_PLUGIN(cleaners cleaners.cpp)
     DFHACK_PLUGIN(weather weather.cpp)
     DFHACK_PLUGIN(colonies colonies.cpp)
@@ -122,8 +122,8 @@ if (BUILD_SUPPORTED)
     DFHACK_PLUGIN(changevein changevein.cpp)
     DFHACK_PLUGIN(changelayer changelayer.cpp)
     DFHACK_PLUGIN(changeitem changeitem.cpp)
-    DFHACK_PLUGIN(advtools advtools.cpp)
-    DFHACK_PLUGIN(tweak tweak.cpp)
+#    DFHACK_PLUGIN(advtools advtools.cpp)
+#    DFHACK_PLUGIN(tweak tweak.cpp)
     DFHACK_PLUGIN(feature feature.cpp)
     DFHACK_PLUGIN(lair lair.cpp)
     DFHACK_PLUGIN(zone zone.cpp LINK_LIBRARIES lua)
@@ -131,14 +131,14 @@ if (BUILD_SUPPORTED)
     DFHACK_PLUGIN(regrass regrass.cpp)
     DFHACK_PLUGIN(forceequip forceequip.cpp)
     DFHACK_PLUGIN(manipulator manipulator.cpp)
-    DFHACK_PLUGIN(search search.cpp)
-    DFHACK_PLUGIN(automaterial automaterial.cpp)
+#    DFHACK_PLUGIN(search search.cpp)
+#    DFHACK_PLUGIN(automaterial automaterial.cpp)
     # this one exports functions to lua
     DFHACK_PLUGIN(burrows burrows.cpp LINK_LIBRARIES lua)
-    DFHACK_PLUGIN(sort sort.cpp LINK_LIBRARIES lua)
+#    DFHACK_PLUGIN(sort sort.cpp LINK_LIBRARIES lua)
     DFHACK_PLUGIN(steam-engine steam-engine.cpp)
     DFHACK_PLUGIN(power-meter power-meter.cpp LINK_LIBRARIES lua)
-    DFHACK_PLUGIN(siege-engine siege-engine.cpp LINK_LIBRARIES lua)
+#    DFHACK_PLUGIN(siege-engine siege-engine.cpp LINK_LIBRARIES lua)
     DFHACK_PLUGIN(eventful eventful.cpp LINK_LIBRARIES lua)
     DFHACK_PLUGIN(add-spatter add-spatter.cpp)
     DFHACK_PLUGIN(fix-armory fix-armory.cpp)
@@ -149,7 +149,7 @@ if (BUILD_SUPPORTED)
     #DFHACK_PLUGIN(dfstream dfstream.cpp LINK_LIBRARIES clsocket dfhack-tinythread)
     DFHACK_PLUGIN(autoSyndrome autoSyndrome.cpp)
     DFHACK_PLUGIN(syndromeTrigger syndromeTrigger.cpp)
-    DFHACK_PLUGIN(infiniteSky infiniteSky.cpp)
+#    DFHACK_PLUGIN(infiniteSky infiniteSky.cpp)
     DFHACK_PLUGIN(digFlood digFlood.cpp)
     DFHACK_PLUGIN(createitem createitem.cpp)
     DFHACK_PLUGIN(outsideOnly outsideOnly.cpp)
@@ -160,17 +160,17 @@ if (BUILD_SUPPORTED)
     DFHACK_PLUGIN(mousequery mousequery.cpp)
     DFHACK_PLUGIN(autotrade autotrade.cpp)
     DFHACK_PLUGIN(stocks stocks.cpp)
-    DFHACK_PLUGIN(treefarm treefarm.cpp)
+#    DFHACK_PLUGIN(treefarm treefarm.cpp)
     DFHACK_PLUGIN(cleanconst cleanconst.cpp)
     DFHACK_PLUGIN(3dveins 3dveins.cpp)
     DFHACK_PLUGIN(strangemood strangemood.cpp)
     DFHACK_PLUGIN(command-prompt command-prompt.cpp)
 	DFHACK_PLUGIN(remotefortressreader remotefortressreader.cpp PROTOBUFS RemoteFortressReader)
     DFHACK_PLUGIN(building-hacks building-hacks.cpp LINK_LIBRARIES lua)
-    DFHACK_PLUGIN(embark-tools embark-tools.cpp)
+#    DFHACK_PLUGIN(embark-tools embark-tools.cpp)
     DFHACK_PLUGIN(petcapRemover petcapRemover.cpp)
     
-    add_subdirectory(rendermax)
+#    add_subdirectory(rendermax)
 endif()
 
 # this is the skeleton plugin. If you want to make your own, make a copy and then change it
diff --git a/plugins/manipulator.cpp b/plugins/manipulator.cpp
index 5d36dcd..79a8476 100644
--- a/plugins/manipulator.cpp
+++ b/plugins/manipulator.cpp
@@ -180,7 +180,7 @@ const SkillColumn columns[] = {
     {11, 3, profession::NONE, unit_labor::HAUL_REFUSE, job_skill::NONE, "Re"},
     {11, 3, profession::NONE, unit_labor::HAUL_FURNITURE, job_skill::NONE, "Fu"},
     {11, 3, profession::NONE, unit_labor::HAUL_ANIMAL, job_skill::NONE, "An"},
-    {11, 3, profession::NONE, unit_labor::PUSH_HAUL_VEHICLE, job_skill::NONE, "Ve"},
+    {11, 3, profession::NONE, unit_labor::HANDLE_VEHICLES, job_skill::NONE, "Ve"},
 // Other Jobs
     {12, 4, profession::ARCHITECT, unit_labor::ARCHITECT, job_skill::DESIGNBUILDING, "Ar"},
     {12, 4, profession::ALCHEMIST, unit_labor::ALCHEMIST, job_skill::ALCHEMY, "Al"},
@@ -217,6 +217,7 @@ const SkillColumn columns[] = {
     {15, 8, profession::NONE, unit_labor::NONE, job_skill::SITUATIONAL_AWARENESS, "Ob"},
     {15, 8, profession::NONE, unit_labor::NONE, job_skill::COORDINATION, "Cr"},
     {15, 8, profession::NONE, unit_labor::NONE, job_skill::BALANCE, "Ba"},
+    {15, 8, profession::NONE, unit_labor::NONE, job_skill::CLIMBING, "Cl"},
 // Social
     {16, 3, profession::NONE, unit_labor::NONE, job_skill::PERSUASION, "Pe"},
     {16, 3, profession::NONE, unit_labor::NONE, job_skill::NEGOTIATION, "Ne"},
diff --git a/plugins/reveal.cpp b/plugins/reveal.cpp
index 9bd63e4..1cafc3c 100644
--- a/plugins/reveal.cpp
+++ b/plugins/reveal.cpp
@@ -430,7 +430,9 @@ command_result revflood(color_ostream &out, vector<string> & params)
         case tiletype_shape::STAIR_UP:
         case tiletype_shape::RAMP:
         case tiletype_shape::FLOOR:
-        case tiletype_shape::TREE:
+        case tiletype_shape::BRANCH:
+        case tiletype_shape::TRUNK_BRANCH:
+        case tiletype_shape::TWIG:
         case tiletype_shape::SAPLING:
         case tiletype_shape::SHRUB:
         case tiletype_shape::BOULDER:
@@ -442,6 +444,12 @@ command_result revflood(color_ostream &out, vector<string> & params)
             above = sides = true;
             break;
         }
+        if (tileMaterial(tt) == tiletype_material::PLANT || tileMaterial(tt) == tiletype_material::MUSHROOM)
+        {
+            if(from_below)
+                unhide = 0;
+            above = sides = true;
+        }
         if(unhide)
         {
             des.bits.hidden = false;
